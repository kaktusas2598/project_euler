/* The sequence of triangle numbers is generated by adding
 * the natural numbers. So the 7th triangle number would be 
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 *
 * What is the value of the first triangle number to have 
 * over five hundred divisors?
 *
 */
#include<iostream>
#include<map>//For storing prime factors with powers

/* RESEARCH
 * Tau(divisor) function for number n:
 * d(n) = d(p^a*q^b)=(a+1)(b+1)
 */

using namespace std;

int num_divisors(int n);
int main(){

	long long triangular_num = 0;
	long long num = 1;

	while(true){
		triangular_num += num;
		if(num_divisors(triangular_num) >=500)
			break;
		num++;
	}
	//num_divisors(12375);

	cout << "First triangular number tp have over 500 divisors: " << triangular_num << endl;
	return 0;
}
/* Tau(divisor) function for number n:
 * d(n) = d(p^a*q^b)=(a+1)(b+1)
 */
int num_divisors(int n){
	map<int,int> prime_factors;

	//factor primes
	for(int i=2; i<=n;i++){
		//TODO: check if n is already 1
		if(n == 1)
			break;
		if(n % i == 0){
			prime_factors[i] = 1;
			n /= i;
			while(n % i == 0){
				prime_factors[i]++;
				n /= i;
			}
		}
	}
	//tau function
	int divisors = 1;
	map<int,int>::iterator iter;
	for(iter = prime_factors.begin(); iter != prime_factors.end();++iter){
		divisors *= iter->second + 1;
		//cout << iter->first <<": " <<iter->second << endl;
	}
	return divisors;
}
